{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport { StatusBar } from 'expo-status-bar';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport React, { useState } from 'react';\nimport { useDispatch, useSelector } from 'react-native-redux';\nimport MyButton from \"../components/button\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\n\nvar SignOut = function SignOut() {\n  var _useState = useState(\"default message\"),\n      _useState2 = _slicedToArray(_useState, 2),\n      message = _useState2[0],\n      setMessage = _useState2[1];\n\n  var dispatch = useDispatch();\n\n  function addUser(user) {\n    var action = {\n      type: \"ADD_USER\",\n      payload: user\n    };\n    dispatch(action);\n  }\n\n  var user = useSelector(function (state) {\n    return state.username;\n  });\n  return _jsxs(View, {\n    style: styles.container,\n    children: [_jsx(Text, {\n      style: styles.header,\n      children: \"Account Page\"\n    }), _jsx(Text, {\n      children: message\n    }), _jsx(MyButton, {\n      buttonText: \"Press here to change the message\",\n      onPress: function onPress() {\n        return setMessage(\"new message\");\n      }\n    }), _jsx(MyButton, {\n      buttonText: \"Reset\",\n      onPress: function onPress() {\n        return setMessage(\"back to default\");\n      }\n    }), _jsxs(Text, {\n      children: [\"User: \", user]\n    }), _jsx(MyButton, {\n      buttonText: \"Add User\",\n      onPress: function onPress() {\n        return addUser(\"Amy\");\n      }\n    }), _jsx(StatusBar, {\n      style: \"auto\"\n    })]\n  });\n};\n\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#eff1f3',\n    alignItems: 'center',\n    justifyContent: 'center'\n  },\n  header: {\n    color: 'green',\n    fontWeight: 'bold',\n    textDecorationLine: 'underline',\n    fontSize: 20\n  }\n});\nexport default SignOut;","map":{"version":3,"names":["StatusBar","React","useState","useDispatch","useSelector","MyButton","SignOut","message","setMessage","dispatch","addUser","user","action","type","payload","state","username","styles","container","header","StyleSheet","create","flex","backgroundColor","alignItems","justifyContent","color","fontWeight","textDecorationLine","fontSize"],"sources":["C:/Users/cjchu/AwesomeProject/src/screens/signout.js"],"sourcesContent":["// import { StatusBar } from 'expo-status-bar';\r\n// import { StyleSheet, Text, View, TouchableOpacity } from 'react-native';\r\n// import React, { useState} from 'react';\r\n// import _ from 'lodash';\r\n\r\n\r\n// const SignOut = () => {\r\n//   const [animals, setAnimals] = useState([\r\n//     { type: \"Lion\" },\r\n//     { type: \"Rabbit\" },\r\n//     { type: \"Wolf\" }\r\n//   ]);\r\n  \r\n//   const handThis = () =>{\r\n//     const element = _.sample(animals);\r\n//     console.log(element, \"element\")\r\n//     return element\r\n//   }\r\n\r\n//   return (\r\n \r\n//     <View style={styles.container}>\r\n//       <View>\r\n//       {animals.map((animal) => (\r\n//         <Text>{animal.type}</Text>\r\n//       ))}\r\n//       </View>\r\n      \r\n\r\n//       <TouchableOpacity style={styles.button} onPress={() => setAnimals([...animals, { type: \"Sparrow\" }])}>\r\n//           <Text>animalsAdd</Text>\r\n//       </TouchableOpacity>\r\n      \r\n//         <TouchableOpacity style={styles.button} onPress={() => setAnimals([handThis()])}>\r\n//           <Text>random</Text>\r\n//       </TouchableOpacity>\r\n\r\n//       <Text>SIGNOUT!</Text>\r\n//       <StatusBar style=\"auto\" />\r\n//     </View>\r\n// )}\r\n\r\n\r\n// const styles = StyleSheet.create({\r\n//     container: {\r\n//       flex: 1,\r\n//       backgroundColor: 'blue',\r\n//       alignItems: 'center',\r\n//       justifyContent: 'center',\r\n//     },\r\n//     title: {\r\n//       color: 'green',\r\n//       fontWeight: 'bold',\r\n//       textDecorationLine: 'underline',\r\n//       fontSize: 20\r\n//     },\r\n//     button: {\r\n//         alignItems: \"center\",\r\n//         backgroundColor: \"#DDDDDD\",\r\n//         padding: 10\r\n//       },\r\n//   });\r\n  \r\n\r\n// export default SignOut;\r\n\r\n\r\nimport { StatusBar } from 'expo-status-bar';\r\nimport { StyleSheet, Text, View, TouchableOpacity } from 'react-native';\r\nimport React, { useState} from 'react';\r\nimport { useDispatch, useSelector } from 'react-native-redux'\r\nimport MyButton from '../components/button';\r\n//import Header from '../components/header';\r\n\r\nconst SignOut = () => {\r\n  const [message, setMessage] = useState(\"default message\")\r\n\r\n  const dispatch = useDispatch()\r\n\r\n  function addUser(user){\r\n    const action = {\r\n        type: \"ADD_USER\",\r\n        payload: user\r\n      }\r\n    dispatch(action)\r\n  }\r\n\r\n  const user = useSelector((state) => state.username)\r\n\r\n  \r\n  return (\r\n    <View style={styles.container}>\r\n      <Text style={styles.header}>Account Page</Text>\r\n      <Text>{message}</Text>\r\n      <MyButton buttonText={\"Press here to change the message\"} onPress={() => setMessage(\"new message\")}></MyButton>\r\n      <MyButton buttonText={\"Reset\"} onPress={() => setMessage(\"back to default\")}></MyButton>\r\n      <Text>User: {user}</Text>\r\n      <MyButton buttonText={\"Add User\"} onPress={() => addUser(\"Amy\")}></MyButton>\r\n      <StatusBar style=\"auto\"/>\r\n    </View>\r\n)}\r\n\r\n\r\nconst styles = StyleSheet.create({\r\n    container: {\r\n        flex: 1,\r\n        backgroundColor: '#eff1f3',\r\n        alignItems: 'center',\r\n        justifyContent: 'center',\r\n      },\r\n      header: {\r\n        color: 'green',\r\n        fontWeight: 'bold',\r\n        textDecorationLine: 'underline',\r\n        fontSize: 20\r\n      }\r\n  });\r\n\r\n\r\nexport default SignOut;"],"mappings":";AAmEA,SAASA,SAAT,QAA0B,iBAA1B;;;;;AAEA,OAAOC,KAAP,IAAgBC,QAAhB,QAA+B,OAA/B;AACA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,oBAAzC;AACA,OAAOC,QAAP;;;;AAGA,IAAMC,OAAO,GAAG,SAAVA,OAAU,GAAM;EACpB,gBAA8BJ,QAAQ,CAAC,iBAAD,CAAtC;EAAA;EAAA,IAAOK,OAAP;EAAA,IAAgBC,UAAhB;;EAEA,IAAMC,QAAQ,GAAGN,WAAW,EAA5B;;EAEA,SAASO,OAAT,CAAiBC,IAAjB,EAAsB;IACpB,IAAMC,MAAM,GAAG;MACXC,IAAI,EAAE,UADK;MAEXC,OAAO,EAAEH;IAFE,CAAf;IAIAF,QAAQ,CAACG,MAAD,CAAR;EACD;;EAED,IAAMD,IAAI,GAAGP,WAAW,CAAC,UAACW,KAAD;IAAA,OAAWA,KAAK,CAACC,QAAjB;EAAA,CAAD,CAAxB;EAGA,OACE,MAAC,IAAD;IAAM,KAAK,EAAEC,MAAM,CAACC,SAApB;IAAA,WACE,KAAC,IAAD;MAAM,KAAK,EAAED,MAAM,CAACE,MAApB;MAAA;IAAA,EADF,EAEE,KAAC,IAAD;MAAA,UAAOZ;IAAP,EAFF,EAGE,KAAC,QAAD;MAAU,UAAU,EAAE,kCAAtB;MAA0D,OAAO,EAAE;QAAA,OAAMC,UAAU,CAAC,aAAD,CAAhB;MAAA;IAAnE,EAHF,EAIE,KAAC,QAAD;MAAU,UAAU,EAAE,OAAtB;MAA+B,OAAO,EAAE;QAAA,OAAMA,UAAU,CAAC,iBAAD,CAAhB;MAAA;IAAxC,EAJF,EAKE,MAAC,IAAD;MAAA,qBAAaG,IAAb;IAAA,EALF,EAME,KAAC,QAAD;MAAU,UAAU,EAAE,UAAtB;MAAkC,OAAO,EAAE;QAAA,OAAMD,OAAO,CAAC,KAAD,CAAb;MAAA;IAA3C,EANF,EAOE,KAAC,SAAD;MAAW,KAAK,EAAC;IAAjB,EAPF;EAAA,EADF;AAUA,CA1BF;;AA6BA,IAAMO,MAAM,GAAGG,UAAU,CAACC,MAAX,CAAkB;EAC7BH,SAAS,EAAE;IACPI,IAAI,EAAE,CADC;IAEPC,eAAe,EAAE,SAFV;IAGPC,UAAU,EAAE,QAHL;IAIPC,cAAc,EAAE;EAJT,CADkB;EAO3BN,MAAM,EAAE;IACNO,KAAK,EAAE,OADD;IAENC,UAAU,EAAE,MAFN;IAGNC,kBAAkB,EAAE,WAHd;IAINC,QAAQ,EAAE;EAJJ;AAPmB,CAAlB,CAAf;AAgBA,eAAevB,OAAf"},"metadata":{},"sourceType":"module"}