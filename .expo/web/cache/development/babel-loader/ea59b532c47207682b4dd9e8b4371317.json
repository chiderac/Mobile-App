{"ast":null,"code":"import { useEffect, useLayoutEffect } from 'react';\nvar isHopefullyDomEnvironment = typeof window !== 'undefined' && typeof window.document !== 'undefined' && typeof window.document.createElement !== 'undefined';\nexport var useIsomorphicLayoutEffect = isHopefullyDomEnvironment ? useLayoutEffect : useEffect;","map":{"version":3,"names":["useEffect","useLayoutEffect","isHopefullyDomEnvironment","window","document","createElement","useIsomorphicLayoutEffect"],"sources":["C:/Users/cjchu/AwesomeProject/node_modules/react-native-redux/node_modules/react-redux/es/utils/useIsomorphicLayoutEffect.js"],"sourcesContent":["import { useEffect, useLayoutEffect } from 'react'; // React currently throws a warning when using useLayoutEffect on the server.\n// To get around it, we can conditionally useEffect on the server (no-op) and\n// useLayoutEffect in the browser. We need useLayoutEffect to ensure the store\n// subscription callback always has the selector from the latest render commit\n// available, otherwise a store update may happen between render and the effect,\n// which may cause missed updates; we also must ensure the store subscription\n// is created synchronously, otherwise a store update may occur before the\n// subscription is created and an inconsistent state may be observed\n\nvar isHopefullyDomEnvironment = typeof window !== 'undefined' && typeof window.document !== 'undefined' && typeof window.document.createElement !== 'undefined';\nexport var useIsomorphicLayoutEffect = isHopefullyDomEnvironment ? useLayoutEffect : useEffect;"],"mappings":"AAAA,SAASA,SAAT,EAAoBC,eAApB,QAA2C,OAA3C;AASA,IAAIC,yBAAyB,GAAG,OAAOC,MAAP,KAAkB,WAAlB,IAAiC,OAAOA,MAAM,CAACC,QAAd,KAA2B,WAA5D,IAA2E,OAAOD,MAAM,CAACC,QAAP,CAAgBC,aAAvB,KAAyC,WAApJ;AACA,OAAO,IAAIC,yBAAyB,GAAGJ,yBAAyB,GAAGD,eAAH,GAAqBD,SAA9E"},"metadata":{},"sourceType":"module"}